<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rayjuneWu</title>
  <subtitle>To be a better man.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-03T05:41:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rayjuneWu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift：Map，FlatMap，Filter，Reduce指南</title>
    <link href="http://yoursite.com/2016/05/31/map-flatmap-filter-reduce/"/>
    <id>http://yoursite.com/2016/05/31/map-flatmap-filter-reduce/</id>
    <published>2016-05-31T09:39:00.000Z</published>
    <updated>2016-06-03T05:41:49.000Z</updated>
    
    <content type="html">&lt;p&gt;此文初始发布在&lt;a href=&quot;http://www.jianshu.com/users/aab9fb1728aa/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的简书&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Swift是支持一门函数式编程的语言，拥有&lt;code&gt;Map&lt;/code&gt;，&lt;code&gt;FlatMap&lt;/code&gt;,&lt;code&gt;Filter&lt;/code&gt;,&lt;code&gt;Reduce&lt;/code&gt;针对集合类型的操作。在使用Objective-C开发时，如果你没接触过函数式编程，那你可能没听说过这些名词，希望此篇文章可以帮助你了解Swift中的&lt;code&gt;Map&lt;/code&gt;，&lt;code&gt;FlatMap&lt;/code&gt;,&lt;code&gt;Filter&lt;/code&gt;,&lt;code&gt;Reduce&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h1&gt;&lt;p&gt;首先我们来看一下&lt;code&gt;map&lt;/code&gt;在&lt;code&gt;Swift&lt;/code&gt;中的的定义，我们看到它可以用在 &lt;a href=&quot;http://swiftdoc.org/v2.0/type/Optional/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optionals&lt;/a&gt; 和 &lt;a href=&quot;http://swiftdoc.org/v2.0/protocol/SequenceType/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SequenceType&lt;/a&gt; 上（如：数组、词典等）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Optional&amp;lt;Wrapped&amp;gt; : _Reflectable, NilLiteralConvertible &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// If `self == nil`, returns `nil`.  Otherwise, returns `f(self!)`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @warn_unused_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public func map&amp;lt;U&amp;gt;(@noescape f: (Wrapped) throws -&amp;gt; U) rethrows -&amp;gt; U?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extension CollectionType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// Returns an `Array` containing the results of mapping `transform`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// over `self`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// - Complexity: O(N).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @warn_unused_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public func map&amp;lt;T&amp;gt;(@noescape transform: (Self.Generator.Element) throws -&amp;gt; T) rethrows -&amp;gt; [T]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;@warn_unused_result&lt;/strong&gt;：表示如果没有检查或者使用该方法的返回值，编译器就会报警告。&lt;br&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/swift/chapter2/07_Closures.html#nonescaping_closures&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;@noescape&lt;/strong&gt;&lt;/a&gt;：表示&lt;code&gt;transform&lt;/code&gt;这个闭包是&lt;strong&gt;非逃逸闭包&lt;/strong&gt;，它只能在当前函数&lt;code&gt;map&lt;/code&gt;中执行，不能脱离当前函数执行。这使得编译器可以明确的知道运行时的上下文环境（因此，在非逃逸闭包中可以不用写&lt;code&gt;self&lt;/code&gt;），进而进行一些优化。&lt;/p&gt;
&lt;h5 id=&quot;对-Optionals进行map操作&quot;&gt;&lt;a href=&quot;#对-Optionals进行map操作&quot; class=&quot;headerlink&quot; title=&quot;对 Optionals进行map操作&quot;&gt;&lt;/a&gt;对 &lt;a href=&quot;http://swiftdoc.org/v2.0/type/Optional/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optionals&lt;/a&gt;进行&lt;code&gt;map&lt;/code&gt;操作&lt;/h5&gt;&lt;p&gt;简要的说就是，如果这个可选值有值，那就解包，调用这个函数，之后返回一个可选值，需要注意的是，返回的可选值类型可以与原可选值类型不一致：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;///原来类型： Int?,返回值类型：String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var value:Int? = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var result = value.map &amp;#123; String(&amp;quot;result = \($0)&amp;quot;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// &amp;quot;Optional(&amp;quot;result = 1&amp;quot;)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(result)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var value:Int? = nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var result = value.map &amp;#123; String(&amp;quot;result = \($0)&amp;quot;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// &amp;quot;nil&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(result)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;对SequenceType进行map操作&quot;&gt;&lt;a href=&quot;#对SequenceType进行map操作&quot; class=&quot;headerlink&quot; title=&quot;对SequenceType进行map操作&quot;&gt;&lt;/a&gt;对&lt;a href=&quot;http://swiftdoc.org/v2.0/protocol/SequenceType/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SequenceType&lt;/a&gt;进行&lt;code&gt;map&lt;/code&gt;操作&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;我们可以使用&lt;code&gt;map&lt;/code&gt;方法遍历数组中的所有元素，并对这些元素一一进行一样的操作（函数方法）。&lt;/strong&gt;&lt;code&gt;map&lt;/code&gt;方法返回完成操作后的数组。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1869329-e17438ddf8171bbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们可以用&lt;code&gt;For-in&lt;/code&gt;完成类似的操作：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var values = [1,3,5,7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var results = [Int]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for var value in values &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value *= 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    results.append(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(results)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这看起来有点麻烦，我们得先定义一个变量&lt;code&gt;var results&lt;/code&gt;然后将&lt;code&gt;values&lt;/code&gt;里面的元素遍历，进行我们的操作以后，将其添加进&lt;code&gt;results&lt;/code&gt;，我们比较下使用&lt;code&gt;map&lt;/code&gt;又会怎么样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let results = values.map (&amp;#123; (element) -&amp;gt; Int in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return element * 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们向&lt;code&gt;map&lt;/code&gt;传入了一个闭包，对数组中的所有元素都 &lt;code&gt;乘以2&lt;/code&gt;，将返回的新的数组赋值为&lt;code&gt;results&lt;/code&gt;，是不是精简了许多？还能更精简！&lt;/p&gt;
&lt;h4 id=&quot;精简写法&quot;&gt;&lt;a href=&quot;#精简写法&quot; class=&quot;headerlink&quot; title=&quot;精简写法&quot;&gt;&lt;/a&gt;精简写法&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let results = values.map &amp;#123; $0 * 2 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;what the fuck…沉住气，让我们一步步来解析怎么就精简成这样了，保证让你神清气爽。翻开&lt;a href=&quot;http://wiki.jikexueyuan.com/project/swift/chapter2/07_Closures.html#closure_expressions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Swift Programming Language&lt;/a&gt;中对于闭包的定义你就能找到线索。&lt;/p&gt;
&lt;h5 id=&quot;第一步：&quot;&gt;&lt;a href=&quot;#第一步：&quot; class=&quot;headerlink&quot; title=&quot;第一步：&quot;&gt;&lt;/a&gt;第一步：&lt;/h5&gt;&lt;p&gt;由于闭包的函数体很短，所以我们将其改写成一行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let results = values.map (&amp;#123; (element) -&amp;gt; Int in return element * 2 &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;第二步：&quot;&gt;&lt;a href=&quot;#第二步：&quot; class=&quot;headerlink&quot; title=&quot;第二步：&quot;&gt;&lt;/a&gt;第二步：&lt;/h5&gt;&lt;p&gt;由于我们的闭包是作为&lt;code&gt;map&lt;/code&gt;的参数传入的，系统可以推断出其参数与返回值，因为其参数必须是(Element) -&amp;gt; Int类型的函数。因此，返回值类型，&lt;code&gt;-&amp;gt;&lt;/code&gt;及围绕在参数周围的括号都可以被忽略：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let results = values.map (&amp;#123; element  in return element * 2 &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;第三步：&quot;&gt;&lt;a href=&quot;#第三步：&quot; class=&quot;headerlink&quot; title=&quot;第三步：&quot;&gt;&lt;/a&gt;第三步：&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;单行表达式闭包&lt;/strong&gt;可以通过省略&lt;code&gt;return&lt;/code&gt;来隐式返回闭包的结果：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let results = values.map (&amp;#123; element  in element * 2 &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于闭包函数体只含有&lt;code&gt;element * 2&lt;/code&gt;这单一的表达式，该表达式返回&lt;code&gt;Int&lt;/code&gt;类型，与我们例子中&lt;code&gt;map&lt;/code&gt;所需的闭包的返回值类型一致（其实是泛型），所以，可以省略&lt;code&gt;return&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;第四步：&quot;&gt;&lt;a href=&quot;#第四步：&quot; class=&quot;headerlink&quot; title=&quot;第四步：&quot;&gt;&lt;/a&gt;第四步：&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;参数名称缩写（Shorthand Argument Names）&lt;/strong&gt;，由于&lt;code&gt;Swift&lt;/code&gt;自动为内联闭包提供了参数缩写功能，你可以直接使用&lt;code&gt;$0&lt;/code&gt;,&lt;code&gt;$1&lt;/code&gt;,&lt;code&gt;$2&lt;/code&gt;…依次获取闭包的第1，2，3…个参数。&lt;br&gt;如果您在闭包表达式中使用参数名称缩写，您可以在闭包参数列表中省略对其的定义，并且对应参数名称缩写的类型会通过函数类型进行推断。&lt;code&gt;in&lt;/code&gt;关键字也同样可以被省略：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let results = values.map (&amp;#123; $0 * 2 &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;例子中的$0即代表闭包中的第一个参数。&lt;/p&gt;
&lt;h5 id=&quot;最后一步：&quot;&gt;&lt;a href=&quot;#最后一步：&quot; class=&quot;headerlink&quot; title=&quot;最后一步：&quot;&gt;&lt;/a&gt;最后一步：&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;尾随闭包&lt;/strong&gt;，由于我们的闭包是作为&lt;strong&gt;最后一个&lt;/strong&gt;参数传递给&lt;code&gt;map&lt;/code&gt;函数的，所以我们可以将闭包表达式尾随：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let results = values.map ()&amp;#123; $0 * 2 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果函数只需要闭包表达式&lt;strong&gt;一个&lt;/strong&gt;参数，当您使用尾随闭包时，您甚至可以把()省略掉：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let results = values.map &amp;#123; $0 * 2 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;quot;[2, 6, 10, 14]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果还有不明白的，可以多翻阅翻阅&lt;a href=&quot;http://wiki.jikexueyuan.com/project/swift/chapter2/07_Closures.html#closure_expressions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Swift Programming Language&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&quot;FlatMap&quot;&gt;&lt;a href=&quot;#FlatMap&quot; class=&quot;headerlink&quot; title=&quot;FlatMap&quot;&gt;&lt;/a&gt;FlatMap&lt;/h1&gt;&lt;p&gt;与map一样，它可以用在 &lt;a href=&quot;http://swiftdoc.org/v2.0/type/Optional/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optionals&lt;/a&gt;和 &lt;a href=&quot;http://swiftdoc.org/v2.0/protocol/SequenceType/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SequenceType&lt;/a&gt; 上（如：数组、词典等）。我们先来看看针对Optional的定义：&lt;/p&gt;
&lt;h5 id=&quot;对-Optionals进行flatMap操作&quot;&gt;&lt;a href=&quot;#对-Optionals进行flatMap操作&quot; class=&quot;headerlink&quot; title=&quot;对 Optionals进行flatMap操作&quot;&gt;&lt;/a&gt;对 &lt;a href=&quot;http://swiftdoc.org/v2.0/type/Optional/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Optionals&lt;/a&gt;进行&lt;code&gt;flatMap&lt;/code&gt;操作&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Optional&amp;lt;Wrapped&amp;gt; : _Reflectable, NilLiteralConvertible &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// Returns `nil` if `self` is `nil`, `f(self!)` otherwise.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @warn_unused_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public func flatMap&amp;lt;U&amp;gt;(@noescape f: (Wrapped) throws -&amp;gt; U?) rethrows -&amp;gt; U?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就闭包而言，这里有一个明显的不同，这次&lt;code&gt;flatMap&lt;/code&gt;期望一个 &lt;code&gt;(Wrapped) -&amp;gt; U?)&lt;/code&gt;闭包。对于可选值， flatMap 对于输入一个可选值时应用闭包返回一个可选值，之后这个结果会被压平，也就是返回一个解包后的结果。本质上，相比 &lt;code&gt;map&lt;/code&gt;,&lt;code&gt;flatMap&lt;/code&gt;也就是在可选值层做了一个解包。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var value:String? = &amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var result = value.map &amp;#123; Int($0)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// &amp;quot;Optional(Optional(1))&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(result)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var value:String? = &amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var result = value.flatMap &amp;#123; Int($0)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// &amp;quot;&amp;quot;Optional(1)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(result)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用flatMap就可以在链式调用时，不用做额外的解包工作：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var value:String? = &amp;quot;1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var result = value.flatMap &amp;#123; Int($0)&amp;#125;.map &amp;#123; $0 * 2 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// &amp;quot;&amp;quot;Optional(2)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(result)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;对SequenceType进行flatMap操作&quot;&gt;&lt;a href=&quot;#对SequenceType进行flatMap操作&quot; class=&quot;headerlink&quot; title=&quot;对SequenceType进行flatMap操作&quot;&gt;&lt;/a&gt;对&lt;a href=&quot;http://swiftdoc.org/v2.0/protocol/SequenceType/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SequenceType&lt;/a&gt;进行&lt;code&gt;flatMap&lt;/code&gt;操作&lt;/h5&gt;&lt;p&gt;我们先来看看&lt;code&gt;Swift中的定义&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension SequenceType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// 返回一个将变换结果连接起来的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// `transform` over `self`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ///     s.flatMap(transform)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// is equivalent to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ///     Array(s.map(transform).flatten())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @warn_unused_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public func flatMap&amp;lt;S : SequenceType&amp;gt;(transform: (Self.Generator.Element) throws -&amp;gt; S) rethrows -&amp;gt; [S.Generator.Element]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extension SequenceType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// 返回一个包含非空值的映射变换结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @warn_unused_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public func flatMap&amp;lt;T&amp;gt;(@noescape transform: (Self.Generator.Element) throws -&amp;gt; T?) rethrows -&amp;gt; [T]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这两个描述，就提现了&lt;code&gt;flatMap&lt;/code&gt;对&lt;a href=&quot;http://swiftdoc.org/v2.0/protocol/SequenceType/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SequenceType&lt;/a&gt;的两个作用：&lt;/p&gt;
&lt;h5 id=&quot;一：压平&quot;&gt;&lt;a href=&quot;#一：压平&quot; class=&quot;headerlink&quot; title=&quot;一：压平&quot;&gt;&lt;/a&gt;一：压平&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var values = [[1,3,5,7],[9]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let flattenResult = values.flatMap&amp;#123; $0 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// [1, 3, 5, 7, 9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;二：空值过滤&quot;&gt;&lt;a href=&quot;#二：空值过滤&quot; class=&quot;headerlink&quot; title=&quot;二：空值过滤&quot;&gt;&lt;/a&gt;二：空值过滤&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var values:[Int?] = [1,3,5,7,9,nil]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let flattenResult = values.flatMap&amp;#123; $0 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// [1, 3, 5, 7, 9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Filter&quot;&gt;&lt;a href=&quot;#Filter&quot; class=&quot;headerlink&quot; title=&quot;Filter&quot;&gt;&lt;/a&gt;Filter&lt;/h1&gt;&lt;p&gt;同样，我先来看看&lt;code&gt;Swift&lt;/code&gt;中的定义：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension SequenceType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// 返回包含原数组中符合条件的元素的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// Returns an `Array` containing the elements of `self`,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// in order, that satisfy the predicate `includeElement`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @warn_unused_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public func filter(@noescape includeElement: (Self.Generator.Element) throws -&amp;gt; Bool) rethrows -&amp;gt; [Self.Generator.Element]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;函数接受一个&lt;code&gt;(Element) -&amp;gt; Bool)&lt;/code&gt;的闭包，来判断原数组中的元素是否符合条件，这个方法用来过滤数组中的一些元素再好不过了：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var values = [1,3,5,7,9]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let flattenResults = values.filter&amp;#123; $0 % 3 == 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//[3, 9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们向flatMap传入了一个闭包，筛选出了能被3整除的数据。&lt;/p&gt;
&lt;h1 id=&quot;Reduce&quot;&gt;&lt;a href=&quot;#Reduce&quot; class=&quot;headerlink&quot; title=&quot;Reduce&quot;&gt;&lt;/a&gt;Reduce&lt;/h1&gt;&lt;p&gt;我们先来看下&lt;code&gt;Swift&lt;/code&gt;中的定义：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extension SequenceType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// Returns the result of repeatedly calling `combine` with an&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// accumulated value initialized to `initial` and each element of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// `self`, in turn, i.e. return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// `combine(combine(...combine(combine(initial, self[0]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// self[1]),...self[count-2]), self[count-1])`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @warn_unused_result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public func reduce&amp;lt;T&amp;gt;(initial: T, @noescape combine: (T, Self.Generator.Element) throws -&amp;gt; T) rethrows -&amp;gt; T&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;给定一个初始化的combine结果，假设为result,从数组的第一个元素开始，不断地调用&lt;code&gt;combine&lt;/code&gt;闭包，参数为：（result，数组中的元素)，返回的结果值继续调用&lt;code&gt;combine函数&lt;/code&gt;，直至元素最后一个元素，返回最终的result值。来看下面的代码（为了更方便你理解这个过程，代码就不简写了）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var values = [1,3,5]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let initialResult = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var reduceResult = values.reduce(initialResult, combine: &amp;#123; (tempResult, element) -&amp;gt; Int in&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return tempResult + element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(reduceResult)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们存在一个数组&lt;code&gt;[1,3,5]&lt;/code&gt;，给定了一个初始化的结果 &lt;code&gt;initialResult = 0&lt;/code&gt;，向&lt;code&gt;reduce&lt;/code&gt;函数传了 &lt;code&gt;(tempResult, element) -&amp;gt; Int&lt;/code&gt;的闭包，&lt;code&gt;tempResut&lt;/code&gt;便是每次闭包返回的结果值，并且其初始值为我们之前设置的&lt;code&gt;initialResult&lt;/code&gt;为&lt;code&gt;0&lt;/code&gt;，&lt;code&gt;element&lt;/code&gt;即为我们数组中的元素（可能为&lt;code&gt;1&lt;/code&gt;,&lt;code&gt;3&lt;/code&gt;,&lt;code&gt;5&lt;/code&gt;）。reduce会一直调用&lt;code&gt;combine&lt;/code&gt;闭包，直至数组最后一个元素。下面的代码更形象地描述了整个过程，这其实跟&lt;code&gt;reduce&lt;/code&gt;所做的操作是等价的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func combine(tempResult: Int, element: Int) -&amp;gt; Int  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return tempResult + element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reduceResult = combine(combine(combine(initialResult, element: 1), element: 3), element: 5)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(reduceResult)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上所用的一些示例代码可以在我的&lt;a href=&quot;https://github.com/wuleijun/Swift-Map-Filter-Reduce&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;中找到，如果您有什么建议可以在评论区留言。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;此文初始发布在&lt;a href=&quot;http://www.jianshu.com/users/aab9fb1728aa/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的简书&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Swift是支持一门函数式编
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift2-同时解包多个可选值（Optionals）</title>
    <link href="http://yoursite.com/2016/05/26/unwarp-multi-optionals/"/>
    <id>http://yoursite.com/2016/05/26/unwarp-multi-optionals/</id>
    <published>2016-05-26T12:02:00.000Z</published>
    <updated>2016-06-03T05:41:56.000Z</updated>
    
    <content type="html">&lt;p&gt;话不多说，直接上代码&lt;/p&gt;
&lt;h3 id=&quot;方式1：&quot;&gt;&lt;a href=&quot;#方式1：&quot; class=&quot;headerlink&quot; title=&quot;方式1：&quot;&gt;&lt;/a&gt;方式1：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var optional1: String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var optianal2: String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if let optional1 = optional1, optianal2 = optianal2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看起来很美~问题来了：如果我希望处理optional1有值，optional2没值的情况怎么办？聪明的你立马想到了：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if let optional1 = optional1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    guard let _ = optianal2 else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(optional1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那optional1无值，optional2有值的情况，optional1与optional2都没值的情况呐…别打我:）&lt;br&gt;可见，&lt;strong&gt;方法一&lt;/strong&gt;在遇到需要对多个可选值分开判断有无值的时候，似乎变得十分无力。可见的一个实际应用场景是登录界面：假设我们有&lt;code&gt;loginNameTextField&lt;/code&gt;与&lt;code&gt;passwordTextField&lt;/code&gt;两个输入框，当用户点击登录按钮时，我们需要对两个输入框进行是否有值的判断，进而给用户抛出对应的错误。&lt;br&gt;那有没有其他的方式来解包多个可选值？我们来看看第二种方式看是否可以优雅地解决这个问题。&lt;/p&gt;
&lt;h3 id=&quot;方式2：&quot;&gt;&lt;a href=&quot;#方式2：&quot; class=&quot;headerlink&quot; title=&quot;方式2：&quot;&gt;&lt;/a&gt;方式2：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//Swift2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var username: String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var password: String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch (username, password) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case let (username?, password?):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Success!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case let (username?, nil):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Password is needed!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case let (nil, password?):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Username is needed!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (nil, nil):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Password and username are needed!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看起来好多了~等等，&lt;code&gt;case let (username?, nil):&lt;/code&gt;中的&lt;code&gt;?&lt;/code&gt;是什么鬼，无需惊恐，这里的&lt;code&gt;?&lt;/code&gt;跟可选值的&lt;code&gt;?&lt;/code&gt;没有一点关系。&lt;code&gt;username?&lt;/code&gt;表示的是&lt;code&gt;username&lt;/code&gt;有值, &lt;code&gt;nil&lt;/code&gt;即表示无值。事实上，这个&lt;code&gt;?&lt;/code&gt;是&lt;strong&gt;Swift2&lt;/strong&gt;新增的语法，我们来看看&lt;strong&gt;Swift2&lt;/strong&gt;以前是怎样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//Before Swift2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var username: String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var password: String?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switch (username, password) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case let (.Some(username), .Some(password)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Success!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case let (.Some(username), .None):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Password is needed!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case let (.None, .Some(password)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Username is needed!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;case (.None, .None):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&amp;quot;Password and username are needed!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相比较而言，新的语法看起来精简了许多。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说，直接上代码&lt;/p&gt;
&lt;h3 id=&quot;方式1：&quot;&gt;&lt;a href=&quot;#方式1：&quot; class=&quot;headerlink&quot; title=&quot;方式1：&quot;&gt;&lt;/a&gt;方式1：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Swift中使用Storyboard和Segue时的依赖注入</title>
    <link href="http://yoursite.com/2016/05/11/storyboard-injection/"/>
    <id>http://yoursite.com/2016/05/11/storyboard-injection/</id>
    <published>2016-05-11T03:31:00.000Z</published>
    <updated>2016-06-03T05:42:06.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/wuleijun/SwiftInjectDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo下载&lt;/a&gt;&lt;br&gt;我们都知道在使用Storyboard时，实现依赖注入总是有点不优雅，让我们先来看看在&lt;strong&gt;Objective-C&lt;/strong&gt;时如何使用：&lt;/p&gt;
&lt;h3 id=&quot;Objective-C&quot;&gt;&lt;a href=&quot;#Objective-C&quot; class=&quot;headerlink&quot; title=&quot;Objective-C&quot;&gt;&lt;/a&gt;Objective-C&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//In RJDemoViewController.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setDependenciesViewModel:(RJDemoViewModel *)viewModel delegate:(id &amp;lt;RJDemoViewControllerDelegate&amp;gt;)delegate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.viewModel = viewModel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.delegate = delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)assertDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 依赖的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSParameterAssert(self.viewModel &amp;amp;&amp;amp;self.delegate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [super viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self assertDependencies];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以在&lt;code&gt;prepareForSegue&lt;/code&gt;中设置依赖：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ([segue.identifier isEqualToString:showDemoViewController]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RJDemoViewController *viewController = segue.destinationViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSParameterAssert([viewController isKindOfClass:[RJDemoViewController class]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [viewController setDependenciesViewModel:[self viewModelForSelectedThing] delegate:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，当所有的依赖一旦没有被注入，软件就会立刻奔溃，错误定位也变得十分地方便。&lt;br&gt;然后在&lt;code&gt;Swift&lt;/code&gt;中有没有存在更Swift的方式来实现依赖注入呐？&lt;/p&gt;
&lt;h3 id=&quot;Swift&quot;&gt;&lt;a href=&quot;#Swift&quot; class=&quot;headerlink&quot; title=&quot;Swift&quot;&gt;&lt;/a&gt;Swift&lt;/h3&gt;&lt;p&gt;首先定义一个协议（Protocol）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;protocol Injectable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    associatedtype InjectObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func inject(_: InjectObject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func assertDependencies()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;func inject(_: InjectObject)&lt;/code&gt;由于ViewController依赖的对象有可能是&lt;code&gt;Number，String&lt;/code&gt;等等各种类型，为了可读性，所以忽略了&lt;code&gt;inject&lt;/code&gt;方法的参数名，由遵循该协议的&lt;code&gt;ViewController&lt;/code&gt;去自由定义：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class RJDemoViewController: UIViewController, Injectable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @IBOutlet weak private var mainLabel: UILabel!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private var mainText: String!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    override func viewDidLoad() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //由于mainText是String！类型，若没赋值，这里就会Crash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assertDependencies()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 大胆地使用mainText&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mainLabel.text = mainText&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //注： 这里参数名定义为text，提高了可读性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func inject(text: String) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mainText = text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func assertDependencies() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        assert(mainText != nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至此，在&lt;code&gt;prepareForSegue&lt;/code&gt;中，便可实现注入&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepareForSegue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(segue: UIStoryboardSegue, sender: AnyObject?)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; segue.identifier == &lt;span class=&quot;string&quot;&gt;&quot;showDemoViewController&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; vc = segue.destinationViewController &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;RJDemoViewController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            vc.inject(&lt;span class=&quot;string&quot;&gt;&quot;myMainText&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wuleijun/SwiftInjectDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo下载&lt;/a&gt;&lt;br&gt;参考资料：&lt;br&gt;&lt;a href=&quot;https://www.natashatherobot.com/update-view-controller-data-injection-with-storyboards-and-segues-in-swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;www.natashatherobot.com&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/wuleijun/SwiftInjectDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo下载&lt;/a&gt;&lt;br&gt;我们都知道在使用Storyboard时，实现依赖注入总是有点不优雅，让我们先
    
    </summary>
    
    
  </entry>
  
</feed>
